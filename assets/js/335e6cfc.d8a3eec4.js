"use strict";(self.webpackChunkdocusaurus_docs=self.webpackChunkdocusaurus_docs||[]).push([[8728],{8071:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var o=t(5893),s=t(1151);const i={},a="About Smart and Dumb Component Concept",r={id:"learning/Angular/Explanation/smart-and-dumb-components",title:"About Smart and Dumb Component Concept",description:"Background",source:"@site/docs/learning/Angular/Explanation/smart-and-dumb-components.mdx",sourceDirName:"learning/Angular/Explanation",slug:"/learning/Angular/Explanation/smart-and-dumb-components",permalink:"/software-engineering-toolbox/docs/learning/Angular/Explanation/smart-and-dumb-components",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"learningSidebar",previous:{title:"About Building Blocks Concept",permalink:"/software-engineering-toolbox/docs/learning/Angular/Explanation/building-blocks"},next:{title:"Setup Angular Workspaces",permalink:"/software-engineering-toolbox/docs/learning/Angular/Tutorials/setup-angular-workspaces"}},d={},c=[{value:"Background",id:"background",level:2},{value:"Smart and Dumb Components",id:"smart-and-dumb-components",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"about-smart-and-dumb-component-concept",children:"About Smart and Dumb Component Concept"}),"\n",(0,o.jsx)(n.h2,{id:"background",children:"Background"}),"\n",(0,o.jsx)(n.p,{children:"The reason for the smart and dumb component approach is because in modern web applications user interfaces and interactions are getting more complex. The user interface looks the same to the user but is displayed with different kinds of data (e.g. filters or a different context but with the same view)."}),"\n",(0,o.jsxs)("div",{style:{display:"flex",flexDirection:"column"},children:[(0,o.jsxs)("div",{style:{backgroundColor:"yellow",height:"50px",display:"flex",alignItems:"center",justifyContent:"space-between",padding:"8px"},children:[(0,o.jsx)("b",{children:"PlanB. Dashboard"}),(0,o.jsx)("div",{children:"Jens Reiner"})]}),(0,o.jsxs)("div",{style:{display:"flex",flexDirection:"row",gap:"25px",height:"250px"},children:[(0,o.jsx)("div",{style:{backgroundColor:"coral",padding:"8px"},children:(0,o.jsxs)("ul",{style:{listStyle:"square"},children:[(0,o.jsx)("li",{children:"Home"}),(0,o.jsx)("li",{children:"Settings"}),(0,o.jsx)("li",{children:"Administration"})]})}),(0,o.jsxs)("div",{style:{backgroundColor:"red",flexGrow:1,display:"flex",flexDirection:"column",padding:"8px"},children:[(0,o.jsx)("h2",{children:"Machine Park"}),(0,o.jsxs)("table",{style:{border:"3px solid"},children:[(0,o.jsx)("thead",{children:(0,o.jsxs)("tr",{children:[(0,o.jsx)("th",{children:"Name"}),(0,o.jsx)("th",{children:"Active"})]})}),(0,o.jsxs)("tbody",{children:[(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:"Summit"}),(0,o.jsx)("td",{children:"Yes"})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:"Frontera"}),(0,o.jsx)("td",{children:"No"})]})]})]})]})]})]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Given the sample provided above:"}),"\nIn a typical software product I am logged in with my current user. Depending on my role I may have different permissions then others. For example I may be able to see the ",(0,o.jsx)(n.code,{children:"Administration"})," in the navigation or I dont. But this does not change how the navigation is displayed to me as a user. The same visual styles are applied but I have less information visible for me."]}),"\n",(0,o.jsxs)(n.p,{children:["The same can be applied to the ",(0,o.jsx)(n.code,{children:"Machine Park"})," table. Depending on my current filter, user permission or from which other view I came before I get a different amount of information shown but displayed in the same way."]}),"\n",(0,o.jsx)(n.p,{children:"This leads us to a software product where the view is always the same but the information which I get displayed are different. Based on different context or other information."}),"\n",(0,o.jsx)(n.h2,{id:"smart-and-dumb-components",children:"Smart and Dumb Components"}),"\n",(0,o.jsx)(n.p,{children:"Components complete different kinds of tasks. There are components that are responsible for the view => The look and feel of the application. Other components are just for the data aggregation part and communication with others and dont care how the the information is displayed."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Dumb Component:"})," A dumb component in this context does not care what kind of information should be displayed - It just defines how the information is displayed."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Smart Component:"})," A smart component does not care how the information is displayed - It just aggreates all required information by communicating with other components / services and passes the information to a dumb component which then displays the information to the user."]}),"\n",(0,o.jsx)(n.p,{children:"A smart component can not exist without one or multiple dumb components. Dumb components can not exist without smart components that provide the information needed. This concept can then even be moved up by combining smart and dumb components to create a new smart component that is a dumb component of a even larger smart component."}),"\n",(0,o.jsx)(n.p,{children:"The goal is to create a seperate of concerns between components. It is possible to have a single component that is responsible for one part of the view. But when the same view is used for multiple screens the component needs more logic to handle different use cases."}),"\n",(0,o.jsx)(n.p,{children:"Dumb components on the other hand allow to use the same view with multiple use cases without touching the dumb component. A smart component can aggregate new information and the data is displayed the same way as before. A visual change to the view can easily be achieved by switching one dumb component with another one while using the same smart component for the data aggregation part. Updating a single dumb component also updates the view on all other views without updating multiple components."})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>a});var o=t(7294);const s={},i=o.createContext(s);function a(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);